#!/bin/bash
# shellcheck disable=SC2015,SC2016

ENVIN_HTTPS_REPOSITORY="https://github.com/Nephylhim/EnvIn.git"
ENVIN_SSH_REPOSITORY="git@github.com:Nephylhim/EnvIn.git"
ENVIN_DEFAULT_PATH="$HOME/.envin"
DOTFILES_REPOSITORY="Nephylhim/dotfiles"
DOTFILES_SSH_REPOSITORY="git@github.com:Nephylhim/dotfiles.git"
SOFT_INSTALL_DIR="$HOME/opt"

set -eo pipefail

PATH=$PATH:/sbin:/usr/sbin:$HOME/go/bin:/usr/local/go/bin:$HOME/gittools:$HOME/bin:$HOME/.cargo/bin:$HOME/.local/bin

RED=$'\e[01;31m'
GREEN=$'\e[1;32m'
BLUE=$'\e[1;34m'
YELLOW=$'\e[33m'
NC=$'\e[0m'

shell_dir="$(dirname "${BASH_SOURCE[0]}")" # relative path
cd "$shell_dir" &>/dev/null
shell_dir="$(pwd)"
cd - &>/dev/null

red() {
    echo -ne "${RED}$*${NC}"
}
green() {
    echo -ne "${GREEN}$*${NC}"
}
blue() {
    echo -ne "${BLUE}$*${NC}"
}
yellow() {
    echo -ne "${YELLOW}$*${NC}"
}

linfo() {
    echo -e "[$(blue INFO)] $*"
}
lfail() {
    echo -e "[$(red FAIL)] $*"
}
lok() {
    echo -e "[$(green " OK ")] $*"
}
ldebug() {
    if $debug; then
        echo -e "[$(yellow DEBU)] $(yellow "$*")"
    fi
}

# ────────────────────────────────────────────────────────────────────────────────

cmdExists() {
    command -v "$1" >/dev/null 2>&1
    return $?
}

fileExists() {
    if [[ -f $1 ]]; then
        return 0
    else
        return $?
    fi
}

dirExists() {
    if [[ -d $1 ]]; then
        return 0
    else
        return $?
    fi
}

listCfgValues() {
    arrayName=$1
    filename=$2
    unset values
    declare -n values="$arrayName"

    while IFS='' read -r line || [[ -n "$line" ]]; do
        if grep -qP '^(?:#|\/\/)' <<<"$line"; then
            continue
        fi

        # shellcheck disable=SC2001
        value=$(perl -pe 's/^(.*?) *(?:#.*)?$/\1/gm' <<<"$line")
        if [[ $value == "" ]]; then
            continue
        fi

        values+=("$value")
    done <"$filename"
}

verify_admin() {
    # sudo group line in /etc/group
    sudoGrp=$(grep '^sudo:' </etc/group)

    # verify that the user is present in the sudo group line
    if ! grep -Eq "${USER}[,\n]" <<<"$sudoGrp\n"; then
        linfo "User $USER is not sudoer, adding it to sudoers using 'su' command. You'll have to enter root password"
        su -c "echo '$USER  ALL=(ALL) ALL' >> /etc/sudoers"
        sudo usermod -aG sudo "$USER" # This doesn't work as is, as the user would need to log out before being able to use sudo. This method is more clean and so the user is added to the group. However the user is also temporarily added in the sudoer file in order to continue the script
        lok "User $USER added to sudoers"
    fi

    linfo "Verifying user can sudo. You may have to enter your sudo password"
    if sudo true; then
        lok "User is sudoer"
    else
        lfail "User is not sudoer. This script must use sudo to work properly"
        exit 1
    fi
}

sudoer_file_remove_user() {
    sudo sed -Ei "/^${USER}[\t ]+ALL/d" '/etc/sudoers'
}

update_system() {
    sudo apt update
    sudo apt upgrade
}

verifyCmd() {
    cmd=$1
    if [[ $2 != "" ]]; then
        pkg=$2
    else
        pkg=$1
    fi
    ldebug "Verifying cmd $cmd is installed"
    ldebug "Package name: $pkg"

    if cmdExists "$cmd"; then
        lok "${YELLOW}$cmd${NC} installed"
    else
        ldebug "Command not installed, installing it"
        installPkg "$pkg"
    fi
}

verifyCargoCmd() {
    cmd=$1
    if [[ $2 != "" ]]; then
        crate=("${@:2}")
    else
        crate=("$1")
    fi
    ldebug "Verifying cmd $cmd is installed"
    ldebug "Crate name: ${crate[*]}"

    if cmdExists "$cmd"; then
        lok "${YELLOW}$cmd${NC} installed"
    else
        ldebug "Command not installed, installing it"
        cargoInstall "${crate[@]}"
    fi
}

installPkg() {
    linfo "${YELLOW}$*${NC} not installed. Installing..."
    sudo apt install -y "$@"
    lok "Installation successful: ${YELLOW}$*${NC}"
}

cargoInstall() {
    linfo "${YELLOW}$*${NC} not installed. Installing..."
    cargo install "$@"
    lok "Installation successful: ${YELLOW}$*${NC}"
}

ensureDconfValue() {
    local reg=$1
    local expected=$2

    local val
    val=$(dconf read "$reg")
    if [[ "$val" == "$expected" ]]; then
        lok "dconf reg correctly setup $reg"
    else
        linfo "dconf reg $reg not correctly setup. changing value"
        dconf write "$reg" "$expected"

        val=$(dconf read "$reg")
        if [[ "$val" == "$expected" ]]; then
            lok "dconf reg correctly setup $reg"
        else
            lfail "dconf reg not correctly setup. $reg shoud be $expected (got $val)"
            return 1
        fi
    fi
}

ensureDconfDirValues() {
    local dir=$1
    local expectedResults=("${@:2}")

    # echo ""
    # echo "*: $*"
    # echo "dconf dir: $dir"
    # echo "dconf expected results: ${expectedResults[*]}"

    local dve
    for dve in "${expectedResults[@]}"; do
        dvar=$(cut -d':' -f1 <<<"$dve")
        expected=$(cut -d':' -f2 <<<"$dve")

        # echo "should be: $dvar -> $expected"
        ensureDconfValue "${dir}${dvar}" "$expected"
    done
}

printNInstall() {
    name=$1
    cmd=$2

    linfo "$name not installed. Installing..."
    eval "$cmd"
    lok "Installation successful: $name"
}

ensureGitRepositoryPresent() {
    remote=$1
    path=$2
    basePath=$(dirname "$path")
    name=${3:-$(basename "$path")}
    pushRemote=${4:-$remote}

    if test -d "$path"; then
        lok "$(yellow "$name") already exists"
        return
    else
        linfo "$(yellow "$name") does not exist yet. Installing..."
    fi

    if ! test -d "$basePath"; then
        linfo "Parent directory $(yellow "$basePath") doesn't exist yet, creating it..."
        mkdir -p "$basePath"
    fi

    linfo "Cloning $(yellow "$name")"
    git clone --recurse-submodules -j8 "$remote" "$path"
    if [[ "$pushRemote" != "$remote" ]]; then
        linfo "Setting remote push URL to $(yellow "$pushRemote")"
        cd "$path"
        git remote set-url origin "$pushRemote" --push
    fi

    cd "$shell_dir" &>/dev/null
    lok "$(yellow "$name") set up"
}

# ────────────────────────────────────────────────────────────────────────────────

ensurePackages() {
    lines=()
    listCfgValues lines 'packages.cfg'
    for line in "${lines[@]}"; do
        name=$(cut -d: -f1 <<<"$line")
        package=$(cut -d: -f2 <<<"$line")

        verifyCmd "$name" "$package"
    done
}

ensureCargoBins() {
    lines=()
    listCfgValues lines 'cargo_bins.cfg'
    for line in "${lines[@]}"; do
        cmd=$(cut -d: -f1 <<<"$line")
        # shellcheck disable=SC2178
        crate=$(cut -d: -f2 <<<"$line")

        # shellcheck disable=SC2086,SC2128
        verifyCargoCmd "$cmd" $crate
    done
}

isInGitRepo() {
    ldebug "Shell dir: $shell_dir"
    if [ ! -d .git ]; then
        ldebug "Script not in git dir"
        return 0
    fi
    remoteURL=$(git config --get remote.origin.url)
    if [[ $remoteURL != "$ENVIN_HTTPS_REPOSITORY" && $remoteURL != "$ENVIN_SSH_REPOSITORY" ]]; then
        ldebug "Script not in git dir"
        return 0
    fi

    ldebug "Script is in git dir"
    return 1
}

ensureSelfInGitRepository() {
    if ! isInGitRepo; then
        lok "Script executed in repository. Continuing"
        return 0
    fi

    linfo "Not in git repository. Retrieving it to have resources"
    ldebug "to path: $EnvInDirPath"
    git clone --recurse-submodule "$ENVIN_HTTPS_REPOSITORY" "$EnvInDirPath"
    cd "$EnvInDirPath"
    linfo "Setting push url to SSH URL"
    git remote set-url origin "$ENVIN_SSH_REPOSITORY" --push
    linfo "Relaunching EnvIn in git directory"
    bash -c "$EnvInDirPath/envin"

    # EnvIn runned in git repository, this instance can now exit without error
    exit 0
}

installOhMyZSH() {
    linfo "Oh My Zsh not installed. Installing..."
    export RUNZSH='no'
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    lok "Installation successful: Oh My Zsh"
}

installCargo() {
    linfo "cargo not installed. Installing rust env..."
    curl https://sh.rustup.rs -sSf | sh -s -- -y
    lok "Installation successful: rust env"
}

installStarship() {
    linfo "starship not installed. Installing starship..."
    curl -fsSL https://starship.rs/install.sh | bash -s -- -f
    lok "Installation successful: starship"
}

setupDotfiles() {
    linfo "Retrieving dotfiles repository..."
    dot init "$DOTFILES_REPOSITORY"
    cd "$HOME/.dotfiles"
    linfo "Setting push url to SSH URL..."
    git remote set-url origin "$DOTFILES_SSH_REPOSITORY" --push
    linfo "Ensuring submodule presence..."
    git submodule update --init # ensure that we retrieve submodule as well
    cd "$shell_dir" &>/dev/null
    lok "Dotfiles repository retrieved"
}

linkDotfiles() {
    linfo "Linking dotfiles"
    dot link
    lok "Dotfiles linked"
}

installDSMNerdFont() {
    linfo "Installing DroidSansMono Nerd font..."
    mkdir -p "$HOME/.local/share/fonts"
    cd "$HOME/.local/share/fonts"
    curl -fLo "Droid Sans Mono for Powerline Nerd Font Complete.otf" https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/DroidSansMono/complete/Droid%20Sans%20Mono%20Nerd%20Font%20Complete.otf
    cd "$shell_dir" &>/dev/null
    lok "Installation successful: DroidSansMono Nerd font"
}

ensureTilixConfiguration() {
    dt='/com/gexperts/Tilix/'
    dtv=("terminal-title-style:'small'" "use-tabs:true" "theme-variant:'dark'" "control-scroll-zoom:true" "new-instance-mode:'new-session'" "window-style:'disable-csd-hide-toolbar'")

    dtk="${dt}keybindings/"
    # dtkv=("app-shortcuts:'F1'" "app-preferences:'<Primary><Shift>Escape'" "win-switch-to-previous-session:['<Primary><Shift>Tab', '<Primary>Page_Up']" "win-switch-to-next-session:['<Primary>Tab', '<Primary>Page_Down']" "session-switch-to-previous-terminal:''" "session-switch-to-next-terminal:''")
    # dtkv=("app-shortcuts:'F1'" "session-name:'F2'" "app-preferences:'<Primary><Shift>Escape'")
    # dtkv=("app-shortcuts:'F1'" "session-name:'F2'" "win-switch-to-previous-session:['<Primary><Shift>Tab', '<Primary>Page_Up']" "app-preferences:'<Primary><Shift>Escape'" "win-switch-to-next-session:['<Primary>Tab', '<Primary>Page_Down']" "session-switch-to-previous-terminal:'disabled'" "session-switch-to-next-terminal:'disabled'")
    dtkv=("app-shortcuts:'F1'" "session-name:'F2'" "win-switch-to-previous-session:'<Primary>Page_Up'" "app-preferences:'<Primary><Shift>Escape'" "win-switch-to-next-session:'<Primary>Page_Down'" "session-switch-to-previous-terminal:'disabled'" "session-switch-to-next-terminal:'disabled'")

    dtpid=$(dconf list ${dt}profiles/ | head -n1)
    dtp="${dt}profiles/$dtpid"
    # dtpv=("background-color:'#2E2E34343636'" "palette:['#2E2E34343636', '#CCCC00000000', '#4E4E9A9A0606', '#C4C4A0A00000', '#34346565A4A4', '#ADAD4040DFDF', '#060698209A9A', '#D3D3D7D7CFCF', '#555557575353', '#EFEF29292929', '#8A8AE2E23434', '#FCFCE9E94F4F', '#72729F9FCFCF', '#ADAD7F7FA8A8', '#3434E2E2E2E2', '#EEEEEEEEECEC']" "use-theme-colors:false" "cursor-shape:'ibeam'" "text-blink-mode:'unfocused'" "use-system-font:false" "font:'DroidSansMono Nerd Font Mono 12'")
    dtpv=("foreground-color:'#F3F3F3F3F3F3'" "text-blink-mode:'unfocused'" "visible-name:'Default'" "palette:['#252525', '#FF5252', '#C3D82C', '#FFC135', '#42A5F5', '#D81B60', '#00ACC1', '#F5F5F5', '#708284', '#FF5252', '#C3D82C', '#FFC135', '#42A5F5', '#D81B60', '#00ACC1', '#F5F5F5']" "badge-color-set:false" "cursor-background-color:'#EFEF29292929'" "cursor-shape:'ibeam'" "cursor-colors-set:true" "highlight-colors-set:false" "use-system-font:false" "bold-color-set:false" "font:'DroidSansMono Nerd Font 10'" "use-theme-colors:false" "highlight-background-color:'#72729F9FCFCF'" "background-color:'#263238'" "background-transparency-percent:0" "dim-transparency-percent:0")

    ensureDconfDirValues "$dt" "${dtv[@]}"
    ensureDconfDirValues "$dtk" "${dtkv[@]}"
    ensureDconfDirValues "$dtp" "${dtpv[@]}"
}

ensureGnomeConfiguration() {
    # keyboard layouts
    inputsourcesPath='/org/gnome/desktop/input-sources/'
    inputsourcesValues=("sources:[('xkb', 'us+intl'), ('xkb', 'fr')]" "mru-sources:[('xkb', 'us+intl'), ('xkb', 'fr')]" "xkb-options:@as []")
    ensureDconfDirValues "$inputsourcesPath" "${inputsourcesValues[@]}"

    # touchpad
    touchpadPath='/org/gnome/desktop/peripherals/touchpad/'
    touchpadValues=("natural-scroll:false" "tap-to-click:true")
    ensureDconfDirValues "$touchpadPath" "${touchpadValues[@]}"

    # mouse
    mousePath='/org/gnome/desktop/peripherals/mouse/'
    mouseValues=("natural-scroll:false" "accel-profile:'flat'")
    ensureDconfDirValues "$mousePath" "${mouseValues[@]}"

    # keybindings
    keybindingsPath='/org/gnome/desktop/wm/keybindings/'
    keybindingsValues=("move-to-workspace-up:['<Shift><Super>Up']" "move-to-workspace-1:['<Shift><Super>exclam']" "move-to-workspace-2:['<Shift><Super>at']" "move-to-workspace-3:['<Shift><Super>numbersign']" "move-to-workspace-4:['<Shift><Super>dollar']" "move-to-workspace-5:['<Shift><Super>percent']" "move-to-workspace-6:['<Shift><Super>dead_circumflex']" "move-to-workspace-7:['<Shift><Super>ampersand']" "move-to-workspace-8:['<Shift><Super>asterisk']" "move-to-workspace-9:['<Shift><Super>parenright']" "switch-to-workspace-1:['<Super>1']" "switch-to-workspace-2:['<Super>2']" "switch-to-workspace-3:['<Super>3']" "switch-to-workspace-4:['<Super>4']" "switch-to-workspace-5:['<Super>5']" "switch-to-workspace-6:['<Super>6']" "switch-to-workspace-7:['<Super>7']" "switch-to-workspace-8:['<Super>8']" "switch-to-workspace-9:['<Super>9']" "switch-to-workspace-down:['<Primary><Super>Down', '<Super>Page_Down']" "move-to-monitor-down:@as []" "move-to-workspace-down:['<Shift><Super>Down']" "toggle-on-all-workspaces:['<Super>Return']" "move-to-monitor-up:@as []" "switch-to-workspace-up:['<Primary><Super>Up', '<Super>Page_Up']")
    ensureDconfDirValues "$keybindingsPath" "${keybindingsValues[@]}"

    # keyboard conf
    keyboardPath='/org/gnome/settings-daemon/peripherals/keyboard/'
    keyboardValues=("numlock-state:'on'")
    ensureDconfDirValues "$keyboardPath" "${keyboardValues[@]}"

    # custom keybindings
    mediakeysPath='/org/gnome/settings-daemon/plugins/media-keys/'
    mediakeysValues=("custom-keybindings:['/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/']")
    ensureDconfDirValues "$mediakeysPath" "${mediakeysValues[@]}"
    custom0Path='/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/'
    custom0Values=("binding:'<Super>t'" "command:'tilix'" "name:'tilix'")
    ensureDconfDirValues "$custom0Path" "${custom0Values[@]}"
    custom1Path='/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/'
    custom1Values=("binding:'<Primary>dead_grave'" "command:'tilix --quake'" "name:'tilix quake'")
    ensureDconfDirValues "$custom1Path" "${custom1Values[@]}"
    custom2Path='/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/'
    custom2Values=("binding:'<Primary>escape'" "command:'tilix --quake'" "name:'tilix quake 2'")
    ensureDconfDirValues "$custom2Path" "${custom2Values[@]}"
    # TODO: extract custom commands in a separate file to make it more generic
}

installDesktopTheme() {
    linfo "Installing Desktop theme..."
    mkdir -p "$SOFT_INSTALL_DIR"
    cd "$SOFT_INSTALL_DIR"
    git clone https://github.com/vinceliuice/Matcha-gtk-theme.git
    cd Matcha-gtk-theme
    ./install.sh
    cd "$shell_dir" &>/dev/null
    lok "Installation successful: Desktop theme"
}

installIconTheme() {
    linfo "Installing icon theme..."
    mkdir -p "$HOME/.local/share/icons"
    cd "$HOME/.local/share/icons"
    git clone https://github.com/zayronxio/Zafiro-icons.git
    cd "$shell_dir" &>/dev/null
    lok "Installation successful: icon theme"
}

ensureGnomeStyle() {
    ensureDconfValue '/org/gnome/shell/extensions/user-theme/name' "'Matcha-dark-azul'"

    # ensureDconfValue '/org/gnome/desktop/interface/gtk-theme' "'Matcha-dark-azul'"
    # ensureDconfValue '/org/gnome/desktop/interface/icon-theme' "'Zafiro-icons'"
    interfacePath='/org/gnome/desktop/interface/'
    interfaceValues=("show-battery-percentage:true" "gtk-im-module:'gtk-im-context-simple'" "icon-theme:'Zafiro-icons'" "gtk-theme:'Matcha-dark-azul'")
    ensureDconfDirValues "$interfacePath" "${interfaceValues[@]}"

    ensureDconfValue '/org/gnome/desktop/calendar/show-weekdate' "true"
}

installVSCode() {
    linfo "Installing VSCode..."
    wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor >packages.microsoft.gpg
    sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
    sudo sh -c 'echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'
    sudo apt update
    sudo apt install code -y
    lok "Installation successful: VSCode"
}

ensureVSCodeExtensions() {
    extensions="$(code --list-extensions)"

    cfgExtensions=()
    listCfgValues cfgExtensions 'vscode_extensions.cfg'
    for extension in "${cfgExtensions[@]}"; do
        if grep -q "^${extension}$" <<<"$extensions"; then
            lok "Extension ${YELLOW}$extension${NC} is already installed"
        else
            linfo "Installing ${YELLOW}$extension${NC}"
            code --install-extension "$extension"
            lok "Extension ${YELLOW}$extension${NC} installed"
        fi
    done
}

installCheatSh() {
    linfo "Installing cht.sh..."
    PATH_DIR="$HOME/bin" # or another directory on your $PATH
    mkdir -p "$PATH_DIR"
    curl https://cht.sh/:cht.sh >"$PATH_DIR/cht.sh"
    chmod +x "$PATH_DIR/cht.sh"
    lok "Installation successful: cht.sh"
}

installBrew() {
    linfo "Installing Brew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    lok "Installation successful: Brew"
    # brew analytics off # to disable anonymous analytics
}

ensureBrewFormulaes() {
    formulaes="$(brew list -1)"

    cfgFormulaes=()
    listCfgValues cfgFormulaes 'brew_formulaes.cfg'
    for line in "${cfgFormulaes[@]}"; do
        formulae="$(cut -d: -f1 <<<"$line")"
        options="$(cut -d: -f2 <<<"$line")"

        if grep -q "^${formulae}$" <<<"$formulaes"; then
            lok "Formulae ${YELLOW}$formulae${NC} is already installed"
        else
            linfo "Installing ${YELLOW}$formulae${NC}..."
            brew install "$options" "$formulae"
            lok "Formulae ${YELLOW}$formulae${NC} installed successfully"
        fi
    done
}

installGo() {
    linfo "Installing Go..."
    dlPath="$(curl -s "https://golang.org/dl/" |
        grep -P '<a class="download downloadBox" href="([^"]+)">' |
        grep "linux-amd64" |
        sed -E 's|<a class="download downloadBox" href="([^"]+)">|\1|')"

    url="https://golang.org${dlPath}"
    linfo "Installing go using: $url"

    tmpDir="$(mktemp -d)"
    ldebug "tmpDir: $tmpDir"
    cd "$tmpDir"
    linfo "Downloading go archive..."
    curl -LOJs "$url"
    linfo "archive downloaded..."
    archiveName="$(ls)"

    sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf "$archiveName"
    cd "$shell_dir" &>/dev/null
    rm -rf "$tmpDir"
    lok "Go installed"
}

ensureGoPackages() {
    gp="${GOPATH:-$HOME/go}/src"
    goPackages=()
    listCfgValues goPackages 'go_packages.cfg'
    for package in "${goPackages[@]}"; do
        pBase=$(cut -d' ' -f1 <<<"$package" | awk -F '/' '{print $1"/"$2"/"$3}')

        if test -d "$gp/$pBase"; then
            lok "Go package $pBase is already installed"
        else
            linfo "Installing $pBase"
            #shellcheck disable=SC2086
            go get $package
            lok "Go package $pBase installed successfully"
        fi
    done
}

ensureGnomeShellExtensions() {
    extensions=()
    listCfgValues extensions 'gnome_extensions.cfg'

    workingDir="$(mktemp -d)"

    linfo "Checking gnome extensions..."

    for line in "${extensions[@]}"; do
        extensionID="$(cut -d':' -f1 <<<"$line")"
        extensionName="$(cut -d':' -f2 <<<"$line")"

        cd "$workingDir"
        gsei="$shell_dir"/gnome-shell-extension-installer/gnome-shell-extension-installer
        $gsei "$extensionID" --yes --no-install >/dev/null

        extDirName="$(find . -name '*.zip' | sed 's|\.shell-extension\.zip||')"
        rm -rf "${workingDir:?}"/*

        if test -d "$HOME/.local/share/gnome-shell/extensions/$extDirName"; then
            lok "Extension $(yellow "$extensionName") ($(yellow "$extensionID")) already installed"
        else
            linfo "Extension $(yellow "$extensionName") ($(yellow "$extensionID")) not installed yet. Installing..."
            ./gnome-shell-extension-installer/gnome-shell-extension-installer "$extensionID" --yes
            lok "Extension $(yellow "$extensionName") ($(yellow "$extensionID")) installed"
        fi
    done

    cd "$shell_dir" &>/dev/null
    rm -rf "$workingDir"
    lok "Gnome extensions checked"
}

ensureGitDirectories() {
    gitDirs=()
    listCfgValues gitDirs 'git_dirs.cfg'

    linfo "Checking git repositories..."

    for line in "${gitDirs[@]}"; do
        fetchURL="$(cut -d'%' -f1 <<<"$line")"
        # dirPath="$(cut -d'%' -f2 <<<"$line" | sed "s|^\$HOME|$HOME|" | sed "s|^~|$HOME|")"
        dirPath="$(cut -d'%' -f2 <<<"$line")" # can still have variables: ~/$HOME/$ZSH_CUSTOM/...
        dirPath="$(eval "echo $dirPath")"
        name="$(cut -d'%' -f3 <<<"$line")"
        pushURL="$(cut -d'%' -f4 <<<"$line")"

        ensureGitRepositoryPresent "$fetchURL" "$dirPath" "$name" "$pushURL"
    done

    lok "Git repositories checked"
}

ensurePipPackages() {
    installedPackages="$(pip3 list)"
    pipPackages=()
    listCfgValues pipPackages 'pip_packages.cfg'

    linfo "Checking pip packages..."

    for line in "${pipPackages[@]}"; do
        ppackage="$(cut -d: -f1 <<<"$line")"
        # options="$(cut -d: -f2 <<<"$line")"

        if grep -Pq "^${ppackage}\s+" <<<"$installedPackages"; then
            lok "Pip package ${YELLOW}$ppackage${NC} is already installed"
        else
            linfo "Installing ${YELLOW}$ppackage${NC}..."
            pip3 install "$ppackage"
            lok "Pip package ${YELLOW}$ppackage${NC} installed successfully"
        fi
    done

    lok "Pip packages checked"
}

# ────────────────────────────────────────────────────────────────────────────────

init() {
    EnvInDirPath="$ENVIN_DEFAULT_PATH"
    cd "$shell_dir" &>/dev/null

    # TODO: verify envin is not launched as sudo
    verify_admin
    # update_system
}

full_install() {
    # CLI utils
    echo -e "\n### CLI utils"
    # verifyCmd "curl"
    # verifyCmd "wget"
    # verifyCmd "vim"
    # verifyCmd "jq"
    # verifyCmd "tree"
    # verifyCmd "ping" "iputils-ping"
    # verifyCmd "rg" "ripgrep"
    # verifyCmd "/usr/bin/fdfind" "fd-find"
    ensurePackages

    # Rust CLI utils
    echo -e "\n### Rust CLI utils"
    cmdExists "cargo" && lok "cargo installed" || installCargo
    # verifyCargoCmd "exa"
    # verifyCargoCmd "bat" "--locked" "bat"
    # verifyCargoCmd "eva"
    # verifyCargoCmd "delta" "git-delta"
    # verifyCargoCmd "watchexec"
    # verifyCargoCmd "dot" "--git" "https://github.com/ubnt-intrepid/dot.git"
    # verifyCargoCmd "rip" "rm-improved"
    ensureCargoBins

    # Shell
    echo -e "\n### Shell"
    # fileExists "$HOME/.local/share/fonts/Droid Sans Mono Nerd Font Complete.otf" || installDSMNerdFont
    fileExists "$HOME/.local/share/fonts/Droid Sans Mono for Powerline Nerd Font Complete.otf" && lok "Nerd font already installed" || installDSMNerdFont
    verifyCmd "tilix"
    ensureTilixConfiguration
    verifyCmd "zsh"
    dirExists "$HOME/.oh-my-zsh" && lok "oh-my-zsh installed" || installOhMyZSH
    # dirExists "$ZSH/custom/plugins/zsh-autosuggestions" && lok "oh-my-zsh installed" || installOMZAutoSuggest
    dirExists "$ZSH/custom/plugins/zsh-autosuggestions" && lok "OMZ autosuggestions installed" || printNInstall "OMZ autosuggestions" 'git clone https://github.com/zsh-users/zsh-autosuggestions "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}"/plugins/zsh-autosuggestions'
    cmdExists "starship" && lok "starship installed" || installStarship
    dirExists "$HOME/.dotfiles" && lok "Dotfiles directory present" || setupDotfiles
    dot check && lok "dotfiles synced correctly" || linkDotfiles

    # Desktop Environment
    echo -e "\n### Desktop environment"
    dirExists "$HOME/.themes/Matcha-dark-azul" || installDesktopTheme
    dirExists "$HOME/.local/share/icons/Zafiro-icons" || installIconTheme
    ensureGnomeStyle
    ensureGnomeConfiguration

    # Gnome Shell extensions
    echo -e "\n### Gnome Shell extensions"
    test -d ./gnome-shell-extension-installer && ensureGnomeShellExtensions

    # Config
    echo -e "\n### Configuration"
    dirExists "$HOME/opt" && lok "local opt directory exists" || mkdir -p "$HOME/opt"
    dirExists "$HOME/bin" && lok "local bin directory exists" || mkdir -p "$HOME/bin"

    # cheat.sh
    cmdExists "cht.sh" && lok "cht.sh already installed" || installCheatSh

    # VSCode
    echo -e "\n### VSCode"
    cmdExists "code" && lok "VSCode already installed" || installVSCode
    ensureVSCodeExtensions

    # Brew
    echo -e "\n### Brew"
    cmdExists "brew" && lok "brew already installed" || installBrew
    ensureBrewFormulaes

    # Golang
    echo -e "\n### Golang"
    cmdExists "go" && lok "go already installed" || installGo

    if ! command -v go &>/dev/null; then
        lfail "Go is not installed on this system. Could not install go binaries (tools)"
    else
        ensureGoPackages
    fi

    # Python
    echo -e "\n### Python3 - pip3"
    ensurePipPackages

    # Git repos
    # ensureGitRepositoryPresent 'https://github.com/Nephylhim/gotoFonction.git' "$HOME/opt/gotoFonction" "Goto function" 'git@github.com:Nephylhim/gotoFonction.git'
    # ensureGitRepositoryPresent 'https://github.com/Nephylhim/OmniCLI.git' "$HOME/opt/OmniCLI" 'OmniCLI' 'git@github.com:Nephylhim/OmniCLI.git'
    echo -e "\n### Git repositories"
    ensureGitDirectories

    # TEST: dotfiles / synced files
    # TEST: git remote set-url origin git@github.com:Nephylhim/dotfiles.git --push
    # TEST: dotfiles retrieve submodules
    # TEST: vim (vimrc+plugins)
    # TEST: git config

    # TEST: my tools
    # TEST: GO bins/env
    # TEST: go bins (panicparse) => go get -u github.com/charmbracelet/glow
    # TEST: gnome configuration / keybindings (via dconf / gsettings)
    # TODO: regarder gsettings
    # TEST: gnome tweak tools + extensions + conf bureaux (theme/icons)
    # TEST: improve gnome extension install (verify if already installed)
    # TEST: clavier us-int + fr (/org/gnome/desktop/input-sources/ ?)
    # verifyCmd "code" # Installed w/ dpkg by retrieving deb file on website
    # TEST: retrieve last version of vscode
    # TEST: vscode conf + extensions
    # TEST: fonts (fixed mono font)
    # TEST: redo color palette tilix + bg
    # TEST: git remote set-url origin git@github.com:Nephylhim/envin.git --push
    # TEST: install OMZ full auto (auto change shell [maybe another step in the script]. But don't enter zsh, we want to finish setup) => ask if we want to change default shell
    # TEST: install starship full auto (in /usr/local/bin or user land?)
    # TEST: user is removed from sudoer file if temporarily added
    # TEST: brew (full auto)
    # TEST: brew formulaes
    # TEST: install cheat.sh
    # TODO: ensure package build-essential is installed => refacto packages
    # TODO: install etcher
    # TEST: retrieve git submodule

    # TODO: adapt for arch/manjaro
    # TODO: --no-graphic mode (no gnome / vscode setup) / profils
    # TODO: change arch to work with plugins?
}

main() {
    debug=false
    init

    verifyCmd "git"
    ensureSelfInGitRepository

    full_install
    sudoer_file_remove_user
}

main
